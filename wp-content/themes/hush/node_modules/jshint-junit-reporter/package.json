{
  "name": "jshint-junit-reporter",
  "version": "0.0.6",
  "description": "A JSHint reporter for jUnit.",
  "main": "index.js",
  "scripts": {
    "test": "node test.js"
  },
  "homepage": "https://github.com/xjamundx/jshint-junit-reporter",
  "repository": {
    "type": "git",
    "url": "https://github.com/xjamundx/jshint-junit-reporter.git"
  },
  "keywords": [
    "jshint",
    "junit",
    "jslint"
  ],
  "readme": "JSHint JUnit Reporter\n==========================\n\nA JSHint output report that returns results compatible with JUnit ANT\nTask XML. This makes it possible to integrate the results into any\nreporting framework that accepts that format. I have found this\nparticularly useful in continuous integration scenarios.\n\nThe entire JSHint run is considered a test suite and each file with\nfailures is a test case. A failure node is added to each test case\nindicating the number of linting errors for that test case. The body\nof that node enumerates the messages.\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<testsuite name=\"jshint\" tests=\"1\" failures=\"3\" errors=\"0\" >\n\t<testcase name=\"test.js\">\n\t\t<failure message=\"3 JSHint Failures\" >\n1. line 3, char 5: Missing &quot;use strict&quot; statement.\n2. line 4, char 2: Missing semicolon.\n3. line 1, char 1: &apos;x&apos; is not defined.\n\t\t</failure>\n\t</testcase>\n</testsuite>\n```\n\nInstallation\n------------\n\nDownload the file directly on install using NPM:\n`npm install jshint-junit-reporter`\n\nUsage\n-----\n\nPass the path to reporter.js to the JSHint `--reporter`\noption like this:\n`jshint --reporter=reporter.js reporter.js`\n\nYou can also use this plugin with the [grunt-contrib-jshint](https://github.com/gruntjs/grunt-contrib-jshint) plugin that support \nthe `reporter` option using something like this in your `options` object:\n\n    options: {\n        reporter: require('jshint-junit-reporter'),\n        reporterOutput: \"junit-output.xml\"\n    }\n\nBamboo Integration\n------------------\n\nIn order to hook this into Bamboo I have a 3 step test-plan:\n\n1. Checkout Code\n2. Build Script\n3. Read JUnit XML Files\n\n### Build Script\n\n```\ngrunt jshint\nawk '/<\\?xml/{x=\"junit-x-\"++i\".xml\";}{print > x;}' junit-output.xml\n```\n\nIt takes the single xml file that is generated by jshint and breaks it up into the many small XML files with each result expected by Bamboo.\n\nI also fill in the `Working Sub-directory` field with the path to my repo, which my case is `grunt`.\n\n![Bamboo Build Script](http://f.cl.ly/items/0f381K2G0B0x0y3H2a3t/Screen%20Shot%202013-05-01%20at%2011.17.16%20AM.png)\n\n### JUnit Parser Configuration\n\n```\ngrunt/junit-x-*.xml\n```\n\nSimply reference the files that are generated by awk and it will pick them up.\n\n![JUnit Parser Configuration](http://f.cl.ly/items/473l1d2g1U1K471B3C1N/Screen%20Shot%202013-05-01%20at%2011.16.45%20AM.png)\n\n### Results\n\n![Bamboo JSHint](http://f.cl.ly/items/3r3m2o2D3U1q0a3p0K0i/Screen%20Shot%202013-05-01%20at%2011.22.31%20AM.png)\n\nLimitations\n-----------\n\nThe reporter API provided by JSHint provides access only to failure\ninformation. Therefore, the resulting XML will only list test cases for\nfiles that contained failures.\n\nThe number of tests containing linting faiures will be reflected in the\n\"tests\" attribute of the testsuite element. The total number of failures\nin those files will be reflected in the \"failures\" attribute.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/xjamundx/jshint-junit-reporter/issues"
  },
  "_id": "jshint-junit-reporter@0.0.6",
  "_shasum": "98e5038869be81223d7f4ef0d73c7a9fddb595db",
  "_from": "jshint-junit-reporter@0.0.6",
  "_resolved": "https://registry.npmjs.org/jshint-junit-reporter/-/jshint-junit-reporter-0.0.6.tgz"
}
